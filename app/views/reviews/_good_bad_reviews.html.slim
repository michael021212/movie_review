= paginate reviews
div.flex
  - reviews.each do |review|
    div.card.mb-2.shadow-sm id="good_bad_reviews_card"
      div.card-body
        div.row
          div.col-md-10
            div.card-title.row#review_index_card-title
                div.col-md-6= link_to review_path(review), id:"review_link", class:"row"
                  = attachment_image_tag review.user, :image, size: "40x40", class: "img-circle pull-left profile-thumb rounded-circle row", fallback: "no_profile_image.jpg"
                  p= "#{review.user.name}さんのレビュー #{review.created_at.strftime('%Y/%m/%d')}"
                strong.col-md-6 id="review_title-#{review.id}"
            div
              h5 id="score-#{review.id}" 総合スコア #{review.total_score}
            = render 'reviews/tag_list', tag_list: review.tag_list
            div.review_index_body
              p.card-text #{review.body}

          div.col-md-2.review_index_poster id="user_show_review-#{review.id}"
        div
          div.review_index_card_footer.row
            div.row.review_index_good-bad id="review-#{review.id}_good"
              = render 'goods/good', review: review
            ////観たいリストに追加済み/する
            - if current_user.interests.find_by(movie_id: review.movie_id).present?
              p= link_to "観たいリストに追加済み", movie_interest_path(review.movie_id), class:"btn btn-info btn-sm", method: :delete
            - else
              p= link_to "この映画を観たい", movie_interest_path(movie_id: review.movie_id, title: review.title, poster_path: review.poster_path), class:"btn btn-warning btn-sm", method: :post
            ////フォロー済み/する
            - if review.user != current_user
              - if review.user.followed_by?(current_user)
                p= link_to 'このユーザーをフォロー済み', user_relationships_path(review.user), class:"btn btn-info btn-sm", method: :delete
              - else
                p= link_to 'このユーザーをフォローする', user_relationships_path(review.user), class:"btn btn-warning btn-sm", method: :post
            - if review.user == current_user
              = link_to "編集", edit_review_path(review), class:"btn btn-primary btn-sm mr-2"
              = link_to "削除", review_path(review), class:"btn btn-danger btn-sm", method: :delete

= paginate reviews

        javascript:
          $('#score-#{review.id}').raty({ size: 36, starOff: '/assets/star-off.png', starOn : '/assets/star-on.png', starHalf: '/assets/star-half.png',
            scoreName: 'review[total_score]', half: true, score: #{review.total_score}, readOnly: true
          });

javascript:
  let movie_id = gon.movie_id // reviewが持っているmovie_idの配列
  let review_id = gon.review_id // reviewのidの配列
  for (let i = 0; i < review_id.length; i++) {
    fetch(`https://api.themoviedb.org/3/movie/${movie_id[i]}?api_key=${gon.TMDb_KEY}&language=ja-JP`) //movie_idを使ってdetailをリクエスト
    .then(response => {
      return response.json();
    })
    .then(data => {
      let poster_path = data.poster_path; //data内のポスター画像pathを代入
      let item = document.getElementById(`user_show_review-${review_id[i]}`)
      let review_title = document.getElementById(`review_title-${review_id[i]}`)

      review_title.textContent = data.title;

      const link = document.createElement('a');
      link.setAttribute('class', 'link');
      link.setAttribute('href', `/movies/${data.id}`);

      const poster = document.createElement('img');
      poster.src = `https://image.tmdb.org/t/p/w200${poster_path}`; //ポスター画像のソース

      item.appendChild(link);
      link.appendChild(poster);
    })

  }