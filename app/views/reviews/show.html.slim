div.review_show_heading
  ="#{@review.user.name}さんの"
  span#review_show_title

div.row
  div.card.col-md-3.px-0.shadow-sm style="height: fit-content;"
    = render 'reviews/reviews_search', q: @q

  div.col-md-9.px-2
    div.card.card-body.shadow-sm#review_card
      div.card-title.row#review_index_card-title
          div.col-md-6= link_to user_path(@review.user), id:"review_link", class:"row"
            = attachment_image_tag @review.user, :image, size: "40x40", class: "img-circle pull-left profile-thumb rounded-circle row", fallback: "no_profile_image.jpg"
            p= "#{@review.user.name}さん #{@review.created_at.strftime('%Y/%m/%d')}"
          strong.col-md-6 id="review_title"
      div.row
        div.col-md-9
          div.review_show_chart_size
            div.review_show_score
              h5 id="score-#{@review.id}" 総合スコア #{@review.total_score}
            canvas#radarChart_lg
        div.movie_image.col-md-3.review_index_poster
      = render 'reviews/tag_list', tag_list: @review.tag_list
      div.review_index_body
        - if @review.spoiler == true
          .hidden_box
            label for="label1"
              |
              i class="fas fa-exclamation-triangle" ネタバレを表示
            input type="checkbox" id="label1"
            .hidden_show
              p.card-text #{@review.body}
        - else
          p.card-text #{@review.body}
      div
        div.review_index_card_footer.row
          div.row.review_index_good-bad id="review-#{@review.id}_good"
            = render 'goods/good', review: @review
          ////レビュー済み/する
          - if @current_user_reviews_movie_id.present?
            p= link_to "レビュー済み(#{@reviews.length}人)", review_path(@current_user_reviews_movie_id), class:"btn btn-info btn-sm"
          - else
            p= link_to "レビューする(#{@reviews.length}人)", new_review_path(movie_id: @review.movie_id, title: @review.title, poster_path: @review.poster_path), class:"btn btn-warning btn-sm"

          ////観たいリストに追加済み/する
          - if @current_user_interests_movie_id.include?(@review.movie_id) # current_userのinterestの中に該当のmovie_idがあればtrue
            p= link_to "観たいリストに追加済み(#{@interests.length}人)", movie_interest_path(@review.movie_id), class:"btn btn-info btn-sm", method: :delete
          - else
            p= link_to "この映画を観たい(#{@interests.length}人)", movie_interest_path(movie_id: @review.movie_id, title: @review.title, poster_path: @review.poster_path), class:"btn btn-warning btn-sm", method: :post
          ////フォロー済み/する
          - if @review.user != current_user
            - if @review.user.followed_by?(current_user)
              p= link_to 'このユーザーをフォロー済み', user_relationships_path(@review.user), class:"btn btn-info btn-sm", method: :delete
            - else
              p= link_to 'このユーザーをフォローする', user_relationships_path(@review.user), class:"btn btn-warning btn-sm", method: :post

javascript:
  $('#score-#{@review.id}').raty({ size: 36, starOff: "#{asset_path 'star-off.png'}", starOn : "#{asset_path 'star-on.png'}", starHalf: "#{asset_path 'star-half.png'}",
    scoreName: 'review[total_score]', half: true, score: #{@review.total_score}, readOnly: true
  });


javascript:
  fetch(`https://api.themoviedb.org/3/movie/${gon.movie_id}?api_key=${gon.TMDb_KEY}&language=ja-JP`) //movie_idを使ってdetailをリクエスト
  .then(response => {
    return response.json();
  })
  .then(data => {
    console.log(data);
    p = data.poster_path; //data内のポスター画像pathを代入

    container = document.querySelector('.movie_image');
    const item = document.createElement('div');
    let review_title = document.getElementById(`review_title`)
    let review__show_title = document.getElementById(`review_show_title`)

    review_title.textContent = data.title;
    review_show_title.textContent = `「${data.title}」のレビュー`;

    const link = document.createElement('a');
    link.setAttribute('class', 'link');
    link.setAttribute('href', `/movies/${data.id}`);

    const poster = document.createElement('img');
    poster.src = `https://image.tmdb.org/t/p/w200${p}`; //ポスター画像のソース

    container.appendChild(item);
    item.appendChild(link);
    link.appendChild(poster);
  })


  //////////////////////////
  /////////チャート/////////
  //////////////////////////
  var ctx = document.getElementById('radarChart_lg');
  options = {
    scale: {
        angleLines: { // 要素ごとのライン
            display: true,
            color: 'rgba(180, 180, 180, 1.0)',
            lineWidth: 1
        },
        ticks: { // 目盛り
            backdropColor: "whitesmoke", // 目盛りの背景色
            suggestedMin: 0,
            suggestedMax: 5,
            fontSize: 12 // 目盛りの文字サイズ
        },
        pointLabels: { // 要素ごとのラベル
            fontSize: 18 // 文字サイズ
        },
        gridLines: { // グリッドライン
          color: 'rgba(180, 180, 180, 1.0)',
          lineWidth: 1
        }
    },
    legend: {
      display: false // ラベルの表示
    }
  };

  var radarChart_lg = new Chart(ctx, {
      type: 'radar',
      data: {
          labels: ['脚本', '演出', '演技', '映像', '音楽'],
          datasets: [{
              label: '',
              data: #{@avg_score}, // 各項目ごとの全ユーザーのスコアの平均
              backgroundColor: [
                  'rgba(255, 99, 132, 0.2)' // ライン範囲内の色
              ],
              borderColor: [
                  'rgba(255, 159, 64, 1)' // 点を繋ぐラインの色
              ],
              borderWidth: 1,
              pointBackgroundColor: "black" // ポインタの色
          }]
      },
      options: options
  });