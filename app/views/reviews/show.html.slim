h1 Reviews#show
div
  = attachment_image_tag @review.user, :image, size: "80x80", class: "img-circle pull-left profile-thumb", fallback: "no_profile_image.jpg"
p= "movie_id: #{@review.movie_id}"
= link_to user_path(id: @review.user_id)
  p= "名前: #{@review.user.name}"
- if @review.user != current_user
  - if @review.user.followed_by?(current_user)
    p= link_to 'フォロー済み', user_relationships_path(@review.user), method: :delete
  - else
    p= link_to 'フォローする', user_relationships_path(@review.user), method: :post
p= "総合スコア: #{@review.total_score}"
div.total_score
javascript:
  src="/js/jquery.raty.js"
  $('.total_score').raty({ size: 36, starOff: '/images/star-off.png', starOn : '/images/star-on.png', starHalf: '/images/star-half.png',
    scoreName: 'review[total_score]', half: true, score: #{@review.total_score}, readOnly: true
  });
div style="position:relative; top:0px; left:0px; width:500px; height:250px;"
  canvas#radarChart_lg
p= "本文: #{@review.body}"
- if @review.user == current_user
  = link_to '編集', edit_review_path(@review)

.movie_image
//@current_user_review = current_user.reviews.find_by(movie_id: @review.movie_id)
- if @current_user_reviews_movie_id.present? # current_userのinterestの中に該当のmovie_idがあればtrue
  = link_to "レビュー済み(#{@reviews.length}人)", review_path(@current_user_reviews_movie_id)
- else
  = link_to "レビューする(#{@reviews.length}人)", new_review_path(movie_id: @review.movie_id)

- if @current_user_interests_movie_id.include?(@review.movie_id) # current_userのinterestの中に該当のmovie_idがあればtrue
  = link_to "追加済み(#{@interests.length}人)", movie_interest_path(@review.movie_id), method: :delete
- else
  = link_to "観たい(#{@interests.length}人)", movie_interest_path(@review.movie_id), method: :post

//// GOODボタン
- if @review.good_by?(current_user)
  = link_to review_good_path(@review), method: :delete do
    i.fas.fa-thumbs-up
  = @review.goods.count
- else
  = link_to review_good_path(@review), method: :post do
    i.far.fa-thumbs-up
  = @review.goods.count
//// BADボタン
- if @review.bad_by?(current_user)
  = link_to review_bad_path(@review), method: :delete do
    i.fas.fa-thumbs-down
  = @review.bads.count
- else
  = link_to review_bad_path(@review), method: :post do
    i.far.fa-thumbs-down
  = @review.bads.count

javascript:
  fetch(`https://api.themoviedb.org/3/movie/${gon.movie_id}?api_key=${gon.TMDb_KEY}&language=en-US`) //movie_idを使ってdetailをリクエスト
  .then(response => {
    return response.json();
  })
  .then(data => {
    console.log(data);
    p = data.poster_path; //data内のポスター画像pathを代入

    container = document.querySelector('.movie_image');
    const row = document.createElement('div');
    row.setAttribute('class', 'item');

    const link = document.createElement('a');
    link.setAttribute('class', 'link');
    link.setAttribute('href', `/movies/${data.id}`);

    const poster = document.createElement('img');
    poster.src = `https://image.tmdb.org/t/p/w200${p}`; //ポスター画像のソース

    container.appendChild(row);
    row.appendChild(link);
    link.appendChild(poster);
  })


  //////////////////////////
  /////////チャート/////////
  //////////////////////////
  var ctx = document.getElementById('radarChart_lg');
  options = {
    scale: {
        angleLines: { // 要素ごとのライン
            display: true,
            color: 'rgba(180, 180, 180, 1.0)',
            lineWidth: 1
        },
        ticks: { // 目盛り
            backdropColor: "white", // 目盛りの背景色
            suggestedMin: 0,
            suggestedMax: 5,
            fontSize: 18 // 目盛りの文字サイズ
        },
        pointLabels: { // 要素ごとのラベル
            fontSize: 20 // 文字サイズ
        },
        gridLines: { // グリッドライン
          color: 'rgba(180, 180, 180, 1.0)',
          lineWidth: 1
        }
    },
    legend: {
      display: false // ラベルの表示
    }
  };

  var radarChart_lg = new Chart(ctx, {
      type: 'radar',
      data: {
          labels: ['脚本', '演出', '演技', '映像', '音楽'],
          datasets: [{
              label: '',
              data: #{@avg_score}, // 各項目ごとの全ユーザーのスコアの平均
              backgroundColor: [
                  'rgba(255, 99, 132, 0.2)' // ライン範囲内の色
              ],
              borderColor: [
                  'rgba(255, 159, 64, 1)' // 点を繋ぐラインの色
              ],
              borderWidth: 1,
              pointBackgroundColor: "black" // ポインタの色
          }]
      },
      options: options
  });