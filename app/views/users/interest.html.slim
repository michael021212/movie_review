h1 観たいリスト
- @interests.each do |interest|
  div id="movie-#{interest.movie_id}"

javascript:
  current_user_id = #{current_user.id}
  let movie_id = gon.interests_movie_id // 特定のユーザーのinterestが持っているmovie_idの配列
  //let review_id = gon.review_id // reviewのidの配列
  for (let i = 0; i < movie_id.length; i++) {
    fetch(`https://api.themoviedb.org/3/movie/${movie_id[i]}?api_key=${gon.TMDb_KEY}&language=ja-JP`) //movie_idを使ってdetailをリクエスト
    .then(response => {
      return response.json();
    })
    .then(data => {
      let poster_path = data.poster_path; //data内のポスター画像pathを代入
      let item = document.getElementById(`movie-${movie_id[i]}`)
      //const row = document.createElement('div');
      //row.setAttribute('class', 'item');

      const row = document.createElement('a');
      row.setAttribute('class', 'set');
      row.setAttribute('href', `/movies/${movie_id[i]}`);

      const poster = document.createElement('img');
      poster.src = `https://image.tmdb.org/t/p/w200${poster_path}`; //ポスター画像のソース

      const title = document.createElement('p');
      title.setAttribute('class', 'title');
      title.textContent = data.title;

      const post = document.createElement('a');
      post.setAttribute('class', 'post');
      review_count = gon.reviews.filter(review => { return review["movie_id"] == movie_id[i] }).length // movie_idをもつレビューの数を数える
      if(gon.reviews.map(review => { return review["user_id"] == current_user_id && review["movie_id"] == movie_id[i] }).includes(true)) { // 全reviewの中にこのmovieに対するcurrent_userのレビューがあればtrue
        review_id = gon.current_user_reviews.find(review => { return review["movie_id"] == movie_id[i] }).id // current_userのレビューの中からこのmovieに関するもののidを取得
        post.setAttribute('href', `/reviews/${review_id}`);
        post.textContent = `レビュー済み(${review_count}人)`;
      } else {
        post.setAttribute('href', `/reviews/new?movie_id=${movie_id[i]}`);
        post.textContent = `レビューする(${review_count}人)`;
      }

      const interest = document.createElement('a');
      interest.setAttribute('class', 'interest');
      interest.setAttribute('href', `/movies/${movie_id[i]}/interest`);
      interest_users_count = gon.all_interests.filter(interest => interest["movie_id"] == movie_id[i]).length // この映画をお気に入りに入れているuserの数
      if(current_user_id == gon.user_id) {
        interest.setAttribute('data-method', 'delete');
        interest.setAttribute('data-confirm', '削除しますか？');
        interest.textContent = `観たいリストから削除`;
      } else {
        if(gon.interests.find(interest => { return interest["movie_id"] == movie_id[i] }) == undefined ) { //current_userの全interestの中からこのmovieに対するものがなければtrue
          interest.setAttribute('data-method', 'post');
          interest.textContent = `観たい(${interest_users_count}人)`;
        } else {
          interest.setAttribute('data-method', 'delete');
          interest.textContent = `追加済み(${interest_users_count}人)`;
        }
      }

      const total_score = document.createElement('p');
      total_score.setAttribute('class', 'total_score');
      var initialValue = 0; //reduceのcallbackのaccに、初回は0が入るようにする。書かないと初回には配列の最初の値が入る
      total_scores = gon.total_scores.filter(total_score => { return total_score["movie_id"] == movie_id[i] }); //movie_idが一致するハッシュを抽出。gon.total_scoreにはmovie_idとtotal_scoreのみの全reviewが入っている
      total_scores_sum = total_scores.reduce((acc, value) => acc + value["total_score"], initialValue); //抽出したハッシュのtotal_scoreの合計を出す
      total_scores_avg = total_scores_sum / total_scores.length; //total_scoreの合計を抽出したハッシュの個数で割る
      if ( Number.isNaN(total_scores_avg)) {
        total_score.textContent = `レビュー無し`;
      } else {
        total_score.textContent = `平均スコア ${total_scores_avg.toFixed(1)}`; //小数点以下1桁(*近似値)
      }

      item.appendChild(row);
        row.appendChild(poster);
        row.appendChild(title);
      item.appendChild(post);
      item.appendChild(interest);
      item.appendChild(total_score);
    })

  }
