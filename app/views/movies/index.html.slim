= render 'movies/genre_search', genres: @genres
= render 'reviews/tag_cloud', tags: @tags
.heading 現在人気の映画

div.flex#app

-if user_signed_in?
  javascript:
    var current_user_id = #{current_user.id};
-else
  javascript:
    var current_user_id = 0;


javascript:
  KEY = gon.TMDb_KEY; // コントローラで定義した環境変数
  const URL = `https://api.themoviedb.org/3/movie/popular?api_key=${KEY}&language=ja-JP`;
  const movies = []

  // asyncとawaitで同期にして描画と処理を分けた。こうしないとfetchで取得しきる前に描画の処理が行われ、何も表示されなくなる為。
  async function getMovies() {
    for(let i=1; i < 3; i++) {
      await fetch(URL + '&page=' + i ) // 1ページにつき20件取得なので20xi件取得できる
      .then(response => response.clone().json())
      .then(function(json){
        Array.prototype.push.apply(movies, json.results)
      })
    }
    return movies;
  };

  getMovies().then(movies => {
    console.log(movies)
    movies.forEach(movie => {
      container = document.getElementById('app');

      const div = document.createElement('div');
      div.classList.add('item', 'card', 'img-thumbnail', 'shadow-sm');

      const link = document.createElement('a');
      link.setAttribute('class', 'link');
      link.setAttribute('href', `/movies/${movie.id}`);

      const poster = document.createElement('img');
      poster.setAttribute('class', 'poster');
      poster.setAttribute('alt', '画像がありません');
      poster.setAttribute('onerror', 'http://localhost:3000/no_image.jpg');
      poster.src = `https://image.tmdb.org/t/p/w200/${movie.poster_path}`;

      const body = document.createElement('div');
      body.setAttribute('class', 'card-body');

      const title = document.createElement('strong');
      title.classList.add('title', 'card-title')
      title.textContent = movie.title;

      const total_score = document.createElement('p');
      total_score.classList.add(`total_score_movie-${movie.id}`, 'card-text');
      var initialValue = 0; //reduceのcallbackのaccに、初回は0が入るようにする。書かないと初回には配列の最初の値が入る
      total_scores = gon.total_scores.filter(total_score => { return total_score["movie_id"] == movie.id }); //movie_idが一致するハッシュを抽出。gon.total_scoreにはmovie_idとtotal_scoreのみの全reviewが入っている
      total_scores_sum = total_scores.reduce((acc, value) => acc + value["total_score"], initialValue); //抽出したハッシュのtotal_scoreの合計を出す
      total_scores_avg = total_scores_sum / total_scores.length; //total_scoreの合計を抽出したハッシュの個数で割る
      if ( Number.isNaN(total_scores_avg)) {
        total_score.textContent = `レビュー無し`;
      } else {
        total_score.textContent = `平均スコア ${total_scores_avg.toFixed(1)}`; //小数点以下1桁(*近似値)
      }

      const btn = document.createElement('p');
      btn.classList.add('mb-0')

      const post = document.createElement('a');
      post.setAttribute('class', 'post');
      review_count = gon.reviews.filter(review => { return review["movie_id"] == movie.id }).length // movie_idをもつレビューの数を数える
      if(gon.reviews.map(review => { return review["user_id"] == current_user_id && review["movie_id"] == movie.id }).includes(true)) { // 全reviewの中にこのmovieに対するcurrent_userのレビューがあればtrue
        review_id = gon.current_user_reviews.find(review => { return review["movie_id"] == movie.id }).id // current_userのレビューの中からこのmovieに関するもののidを取得
        post.setAttribute('href', `/reviews/${review_id}`);
        post.classList.add(`/reviews/${review_id}`, 'btn', 'btn-warning', 'btn-sm');
        post.textContent = `レビュー済み(${review_count}人)`;
      } else {
        post.setAttribute('href', `/reviews/new?movie_id=${movie.id}&title=${movie.title}&poster_path=${movie.poster_path}`);
        post.classList.add('btn', 'btn-warning', 'btn-sm')
        post.textContent = `レビューする(${review_count}人)`;
      }

      const interest = document.createElement('a');
      interest.classList.add('interest', 'btn', 'btn-warning', 'btn-sm');
      interest.setAttribute('href', `/movies/${movie.id}/interest?title=${movie.title}&poster_path=${movie.poster_path}`);
      interest_users_count = gon.all_interests.filter(interest => interest["movie_id"] == movie.id).length // この映画をお気に入りに入れているuserの数
      if(gon.interests.find(interest => { return interest["movie_id"] == movie.id }) == undefined ) { //current_userの全interestの中からこのmovieに対するものがなければtrue
        interest.setAttribute('data-method', 'post');
        interest.textContent = `観たい(${interest_users_count}人)`;
      } else {
        interest.setAttribute('data-method', 'delete');
        interest.textContent = `追加済み(${interest_users_count}人)`;
      }


      container.appendChild(div);
        div.appendChild(link);
          link.appendChild(poster);
        div.appendChild(body)
          body.appendChild(title);
          body.appendChild(total_score);
          body.appendChild(btn)
            btn.appendChild(post);
            btn.appendChild(interest);

      $(`.total_score_movie-${movie.id}`).raty({ size: 36, starOff: '/images/star-off.png', starOn : '/images/star-on.png', starHalf: '/images/star-half.png',
        scoreName: 'review[total_scores_avg]', half: true, score: total_scores_avg.toFixed(1), readOnly: true
      });
    })
  })

