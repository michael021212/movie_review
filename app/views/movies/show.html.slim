h1 Movies#show
div style="position:relative; top:0px; left:0px; width:500px; height:250px;"
  canvas#myChart


div id="#{@movie_id}"

/search.html.slimと同じ
- @reviews.each do |review|
  = link_to review_path(review)
    = attachment_image_tag review.user, :image, size: "80x80", class: "img-circle pull-left profile-thumb", fallback: "no_profile_image.jpg"
    p= "名前 #{review.user.name}"
    p= "総合スコア #{review.total_score}"
    p= review.body
    //// GOODボタン
    - if review.good_by?(current_user)
      = link_to review_good_path(review), method: :delete do
        i.fas.fa-thumbs-up
      = review.goods.count
    - else
      = link_to review_good_path(review), method: :post do
        i.far.fa-thumbs-up
      = review.goods.count
    //// BADボタン
    - if review.bad_by?(current_user)
      = link_to review_bad_path(review), method: :delete do
        i.fas.fa-thumbs-down
      = review.bads.count
    - else
      = link_to review_bad_path(review), method: :post do
        i.far.fa-thumbs-down
      = review.bads.count
  p------------------

javascript:
  current_user_id = #{current_user.id}
  movie_id = gon.movie_id //moviesコントローラーで定義した変数を代入
  total_score_avg = gon.total_score_avg //moviesコントローラーで定義した変数を代入
  fetch(`https://api.themoviedb.org/3/movie/${movie_id}?api_key=${gon.TMDb_KEY}&language=ja-JP`)
  .then(response => {
    return response.json();
  })
  .then(data => {
    console.log(data);

    // ルーティングで定義したmoviesコントローラにapiのdataを:contentとして送る
    // $.ajax({
    //   url: "/movies/movie_data",
    //   type: "GET",
    //   data: {content : data},
    //   datatype: "html",
    // });

    container = document.getElementById(movie_id);
    const row = document.createElement('div');
    row.classList.add('item', 'row');

    const poster_section = document.createElement('div');
    poster_section.classList.add('poster_section', 'col-md-4', 'col-sm-12');

    const poster = document.createElement('img');
    poster.classList.add('movie_show_poster');
    poster.src = `https://image.tmdb.org/t/p/w300_and_h450_bestv2/${data.poster_path}`;

    const post = document.createElement('a');
    post.setAttribute('class', 'post');
    current_user_review = gon.reviews.find(review => { return review["user_id"] == current_user_id }) // このmovieに対するcurrent_userのレビュー
    if( current_user_review != undefined ) {
        post.setAttribute('href', `/reviews/${current_user_review.id}`);
        post.textContent = `レビュー済み(${gon.reviews.length}人)`;
    } else {
      post.setAttribute('href', `/reviews/new?movie_id=${movie_id}`);
      post.textContent = `レビューする(${gon.reviews.length}人)`;
    }

    const interest = document.createElement('a');
    interest.setAttribute('class', 'interest');
    interest.setAttribute('href', `/movies/${movie_id}/interest`);
    if(gon.interests == null) {
      interest.setAttribute('data-method', 'post');
      interest.textContent = `観たい(${gon.interest_users}人)`;
    } else {
      interest.setAttribute('data-method', 'delete');
      interest.textContent = `追加済み(${gon.interest_users}人)`;
    }

    const score = document.createElement('p');
    score.classList.add('score');
    if(total_score_avg === null) {
    score.textContent = `レビュー無し`;
    } else {
    score.textContent = `平均スコア ${total_score_avg.toFixed(1)}`; //小数点以下1桁(*近似値)
    }

    const info_section = document.createElement('div');
    info_section.classList.add('info_section', 'col-md-8', 'col-sm-12');

    const title = document.createElement('h4');
    title.setAttribute('class', 'title');
    title.textContent = data.title;

    const genres = document.createElement('p');
    genres.setAttribute('class', 'genres');
    genres.textContent = data.genres.map(genre => { return genre.name });

    const release_date = document.createElement('p');
    release_date.setAttribute('class', 'release_date');
    release_date.textContent = data.release_date;

    const overview = document.createElement('p');
    overview.setAttribute('class', 'overview');
    overview.textContent = data.overview;

    container.appendChild(row);
      row.appendChild(poster_section);
        poster_section.appendChild(poster);
        poster_section.appendChild(post);
        poster_section.appendChild(interest);
        poster_section.appendChild(score);
      row.appendChild(info_section);
        info_section.appendChild(title);
        info_section.appendChild(genres);
        info_section.appendChild(release_date);
        info_section.appendChild(overview);
  })


  //////////////////////////
  /////////チャート/////////
  //////////////////////////
  var ctx = document.getElementById('myChart');
  options = {
    scale: {
        angleLines: { // 要素ごとのライン
            display: true,
            color: 'rgba(180, 180, 180, 1.0)',
            lineWidth: 1
        },
        ticks: { // 目盛り
            backdropColor: "white", // 目盛りの背景色
            suggestedMin: 0,
            suggestedMax: 5,
            fontSize: 18 // 目盛りの文字サイズ
        },
        pointLabels: { // 要素ごとのラベル
            fontSize: 20 // 文字サイズ
        },
        gridLines: { // グリッドライン
          color: 'rgba(180, 180, 180, 1.0)',
          lineWidth: 1
        }
    },
    legend: {
      display: false // ラベルの表示
    }
  };

  var myChart = new Chart(ctx, {
      type: 'radar',
      data: {
          labels: ['脚本', '演出', '演技', '映像', '音楽'],
          datasets: [{
              label: '',
              data: #{@avg_scores}, // 各項目ごとの全ユーザーのスコアの平均
              backgroundColor: [
                  'rgba(255, 99, 132, 0.2)' // ライン範囲内の色
              ],
              borderColor: [
                  'rgba(255, 159, 64, 1)' // 点を繋ぐラインの色
              ],
              borderWidth: 1,
              pointBackgroundColor: "black" // ポインタの色
          }]
      },
      options: options
  });