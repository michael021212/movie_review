div.movie_show_info id="#{@movie_id}"
div#movie_show_score_section style="width:400px;"
  div#score_section style="text-align: center;"
  canvas#radarChart_lg

h3
  span#movie_show_review_heading
  span に投稿されたレビュー
div.flex
  - @reviews.each do |review|
    div.card.w-100 id="movie_show_review_card"
      div.card-body
        div
          div
            div.card-title.row#review_index_card-title
                div.col-md-6= link_to review_path(review), id:"review_link", class:"row"
                  = attachment_image_tag review.user, :image, size: "40x40", class: "img-circle pull-left profile-thumb rounded-circle row", fallback: "no_profile_image.jpg"
                  p= "#{review.user.name}さんのレビュー #{review.created_at.strftime('%Y/%m/%d')}"
                strong.col-md-6 id="review_title-#{review.id}"
            div
              h5 id="score-#{review.id}" 総合スコア #{review.total_score}
            = render 'reviews/tag_list', tag_list: review.tag_list
            div.review_index_body
              p.card-text #{review.body}

        div
          div.review_index_card_footer.row
            div.row id="review_index_good-bad"
              p このレビューに対する評価
              //// GOODボタン
              - if review.good_by?(current_user)
                = link_to review_good_path(review), class:"btn btn-warning btn-sm", method: :delete do
                  i.fas.fa-thumbs-up
                  = review.goods.count
              - else
                = link_to review_good_path(review), class:"btn btn-warning btn-sm", method: :post do
                  i.far.fa-thumbs-up
                  = review.goods.count
              //// BADボタン
              - if review.bad_by?(current_user)
                = link_to review_bad_path(review), class:"btn btn-warning btn-sm", method: :delete do
                  i.fas.fa-thumbs-down
                  = review.bads.count
              - else
                = link_to review_bad_path(review), class:"btn btn-warning btn-sm", method: :post do
                  i.far.fa-thumbs-down
                  = review.bads.count
              ////フォロー済み/する
              - if review.user != current_user
                - if review.user.followed_by?(current_user)
                  p= link_to 'このユーザーをフォロー済み', user_relationships_path(review.user), class:"btn btn-warning btn-sm movie_show_review_follow", method: :delete
                - else
                  p= link_to 'このユーザーをフォローする', user_relationships_path(review.user), class:"btn btn-warning btn-sm movie_show_review_follow", method: :post

    javascript:
      $('#score-#{review.id}').raty({ size: 36, starOff: '/images/star-off.png', starOn : '/images/star-on.png', starHalf: '/images/star-half.png',
        scoreName: 'review[total_score]', half: true, score: #{review.total_score}, readOnly: true
      });

javascript:
  current_user_id = #{current_user.id}
  movie_id = gon.movie_id //moviesコントローラーで定義した変数を代入
  total_score_avg = gon.total_score_avg //moviesコントローラーで定義した変数を代入
  fetch(`https://api.themoviedb.org/3/movie/${movie_id}?api_key=${gon.TMDb_KEY}&language=ja-JP`)
  .then(response => {
    return response.json();
  })
  .then(data => {
    console.log(data);

    container = document.getElementById(movie_id);
    const row = document.createElement('div');
    row.classList.add('item', 'row');

    const poster_section = document.createElement('div');
    poster_section.classList.add('poster_section', 'col-md-4', 'col-sm-12');
    poster_section.style.cssText = "padding: 0 3rem 0 0.5rem;";
    poster_section.style.cssText = "text-align: center;";

    const poster = document.createElement('img');
    poster.classList.add('movie_show_poster');
    poster.src = `https://image.tmdb.org/t/p/w300_and_h450_bestv2/${data.poster_path}`;

    const post = document.createElement('a');
    post.setAttribute('class', 'post');
    current_user_review = gon.reviews.find(review => { return review["user_id"] == current_user_id }) // このmovieに対するcurrent_userのレビュー
    if( current_user_review != undefined ) {
        post.setAttribute('href', `/reviews/${current_user_review.id}`);
        post.textContent = `レビュー済み(${gon.reviews.length}人)`;
        post.classList.add('btn', 'btn-warning', 'btn-sm');
        post.style.cssText = "margin: 0.5rem 0.5rem";
    } else {
      post.setAttribute('href', `/reviews/new?movie_id=${movie_id}&title=${data.title}&poster_path=${data.poster_path}`);
      post.textContent = `レビューする(${gon.reviews.length}人)`;
      post.classList.add('btn', 'btn-warning', 'btn-sm');
      post.style.cssText = "margin: 0.5rem 0.5rem";
    }

    const interest = document.createElement('a');
    interest.setAttribute('class', 'interest');
    interest.setAttribute('href', `/movies/${movie_id}/interest?title=${data.title}&poster_path=${data.poster_path}`);
    if(gon.interests == null) {
      interest.setAttribute('data-method', 'post');
      interest.textContent = `観たい(${gon.interest_users}人)`;
      interest.classList.add('btn', 'btn-warning', 'btn-sm');
      interest.style.cssText = "margin: 0.5rem 0.5rem";
    } else {
      interest.setAttribute('data-method', 'delete');
      interest.textContent = `追加済み(${gon.interest_users}人)`;
      interest.classList.add('btn', 'btn-warning', 'btn-sm');
      interest.style.cssText = "margin: 0.5rem 0.5rem";
    }

    const score_section = document.getElementById('score_section');
    const score = document.createElement('p');
    score.classList.add('score');
    if(total_score_avg === null) {
    score.textContent = `レビュー無し`;
    } else {
    score.textContent = `平均スコア: ${total_score_avg.toFixed(1)}`; //小数点以下1桁(*近似値)
    }


    const info_section = document.createElement('div');
    info_section.classList.add('info_section', 'col-md-8', 'col-sm-12');

    const title = document.createElement('strong');
    title.setAttribute('class', 'title');
    title.style.cssText = "font-size: 1.5rem";
    title.textContent = data.title;

    const genres = document.createElement('p');
    genres.setAttribute('class', 'genres');
    genres.style.cssText = "margin-top: 1rem;";
    genres.textContent = `ジャンル: ${data.genres.map(genre => { return genre.name })}`;

    const release_date = document.createElement('p');
    release_date.setAttribute('class', 'release_date');
    release_date.textContent = `上映日: ${data.release_date}`;

    const overview = document.createElement('p');
    overview.setAttribute('class', 'overview');
    overview.textContent = data.overview;

    const movie_show_score_section = document.getElementById('movie_show_score_section')
    const movie_show_review_heading = document.getElementById('movie_show_review_heading')
    movie_show_review_heading.textContent = `「${data.title}」`

    container.appendChild(row);
      row.appendChild(poster_section);
        poster_section.appendChild(poster);
        poster_section.appendChild(post);
        poster_section.appendChild(interest);
        score_section.appendChild(score);
      row.appendChild(info_section);
        info_section.appendChild(title);
        info_section.appendChild(genres);
        info_section.appendChild(release_date);
        info_section.appendChild(overview);
        info_section.appendChild(movie_show_score_section);
    $('.score').raty({ size: 36, starOff: '/images/star-off.png', starOn : '/images/star-on.png', starHalf: '/images/star-half.png',
      scoreName: 'review[total_score_avg]', half: true, score: total_score_avg, readOnly: true
    });

  })


  //////////////////////////
  /////////チャート/////////
  //////////////////////////
  var ctx = document.getElementById('radarChart_lg');
  options = {
    scale: {
        angleLines: { // 要素ごとのライン
            display: true,
            color: 'rgba(180, 180, 180, 1.0)',
            lineWidth: 1
        },
        ticks: { // 目盛り
            backdropColor: "whitesmoke", // 目盛りの背景色
            suggestedMin: 0,
            suggestedMax: 5,
            fontSize: 10 // 目盛りの文字サイズ
        },
        pointLabels: { // 要素ごとのラベル
            fontSize: 18 // 文字サイズ
        },
        gridLines: { // グリッドライン
          color: 'rgba(180, 180, 180, 1.0)',
          lineWidth: 1
        }
    },
    legend: {
      display: true // ラベルの表示
    }
  };

  var radarChart_lg = new Chart(ctx, {
      type: 'radar',
      data: {
          labels: ['脚本', '演出', '演技', '映像', '音楽'],
          datasets: [{
              label: '全ユーザーの平均',
              data: #{@avg_scores}, // 各項目ごとの全ユーザーのスコアの平均
              backgroundColor: [
                  'rgba(255, 99, 132, 0.2)' // ライン範囲内の色
              ],
              borderColor: [
                  'rgba(255, 159, 64, 1)' // 点を繋ぐラインの色
              ],
              borderWidth: 1,
              pointBackgroundColor: "black" // ポインタの色
          }]
      },
      options: options
  });